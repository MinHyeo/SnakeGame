#include <iostream>
#include <string>
#include <malloc.h>
#include <conio.h>
#include <windows.h>
#include <time.h>
using namespace std;

//더블 버퍼링
// Rectangle 구조체
struct stRect
{
	int nWidth;
	int nHeight;
};

const char BLOCK_TYPES[][3] = {
	" ",
	"#",
	"@",
};

// 콘솔 관련 설정 값을 가지고 있을 구조체
struct stConsole
{
	// Console Handler
	HANDLE hConsole;
	// Console Rect Data
	stRect rtConsole;
	// Console Buffer Handler
	HANDLE hBuffer[2];
	// Current Console Buffer Index
	int nCurBuffer;

	stConsole()
		: hConsole(nullptr), hBuffer{ nullptr, }, nCurBuffer(0)
	{}
};

// 전역 변수
stConsole console;

void InitGame(bool bInitConsole = true)
{
	// Initialize Console Data
	if (bInitConsole)
	{
		// 현재 콘솔의 핸들을 받아옵니다.
		console.hConsole = GetStdHandle(STD_OUTPUT_HANDLE);
		// 현재 콘솔 버퍼의 인덱스를 0으로 초기화
		console.nCurBuffer = 0;

		// 콘솔 관련 설정
		CONSOLE_CURSOR_INFO consoleCursor{ 1, FALSE };  // 콘솔의 커서 깜빡임을 제거합니다.
		CONSOLE_SCREEN_BUFFER_INFO consoleInfo{ 0, };
		GetConsoleScreenBufferInfo(console.hConsole, &consoleInfo);
		consoleInfo.dwSize.X = 40;    // 콘솔의 Width
		consoleInfo.dwSize.Y = 80;    // 콘솔의 Height

		// 콘솔의 크기를 다시 계산 (나중에 그림 그릴때 사용)
		console.rtConsole.nWidth = consoleInfo.srWindow.Right - consoleInfo.srWindow.Left;
		console.rtConsole.nHeight = consoleInfo.srWindow.Bottom - consoleInfo.srWindow.Top;

		// 콘솔의 첫번째 화면 버퍼 생성
		console.hBuffer[0] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
		SetConsoleScreenBufferSize(console.hBuffer[0], consoleInfo.dwSize);    // 화면 버퍼 크기 설정
		SetConsoleWindowInfo(console.hBuffer[0], TRUE, &consoleInfo.srWindow); // 콘솔 설정
		SetConsoleCursorInfo(console.hBuffer[0], &consoleCursor);              // 콘솔의 커서 설정

		// 콘솔의 두번째 화면 버퍼 생성
		console.hBuffer[1] = CreateConsoleScreenBuffer(GENERIC_READ | GENERIC_WRITE, 0, NULL, CONSOLE_TEXTMODE_BUFFER, NULL);
		SetConsoleScreenBufferSize(console.hBuffer[1], consoleInfo.dwSize);
		SetConsoleWindowInfo(console.hBuffer[1], TRUE, &consoleInfo.srWindow);
		SetConsoleCursorInfo(console.hBuffer[1], &consoleCursor);
	}
}

void DestroyGame()
{
	if (console.hBuffer[0] != nullptr)
	{
		CloseHandle(console.hBuffer[0]);
	}

	if (console.hBuffer[1] != nullptr)
	{
		CloseHandle(console.hBuffer[1]);
	}
}

// 화면 클리어
void ClearScreen()
{
	COORD pos{ 0, };
	DWORD dwWritten = 0;
	unsigned size = console.rtConsole.nWidth * console.rtConsole.nHeight;

	// 콘솔 화면 전체를 띄어쓰기를 넣어 빈 화면처럼 만듭니다.
	FillConsoleOutputCharacter(console.hConsole, ' ', size, pos, &dwWritten);
	SetConsoleCursorPosition(console.hConsole, pos);
}

// 버퍼 스왑
void BufferFlip()
{
	// 화면 버퍼 설정
	SetConsoleActiveScreenBuffer(console.hBuffer[console.nCurBuffer]);
	// 화면 버퍼 인덱스를 교체
	console.nCurBuffer = console.nCurBuffer ? 0 : 1;
}



typedef struct ListNode {
	int x;
	int y;
	char data;
	ListNode* link;
}ListNode;

typedef struct ListType {
	int size = 0;
	ListNode* snakeHead;
	ListNode* snakeTail;
}ListType;

char map[40][80];

void CreatMap() {
	for (int i = 0; i < 40; i++) {
		for (int j = 0; j < 80; j++) {
			if (i == 0 || i == 39) {
				map[i][j] = '#';
			}
			else {
				if (j == 0 || j == 79)
					map[i][j] = '#';
				else
					map[i][j] = ' ';
			}
		}
	}
}

void PrintMap(int score, int size) {
	COORD coord{ 0, };
	DWORD dw = 0;
	printf("Snake Game by MinHyeong Yu                         Score : %d, Length: %d\n", score, size);
	for (short i = 0; i < 40; i++) {
		for (short j = 0; j < 80; j++) {
			cout << map[i][j];
		}
		cout << "\n";
	}
}

void GameOver() {
	char a[] = "게임이 종료되었습니다."; //13
	char b[] = "다시 한 번 하시겠습니까?(Y/N)?"; //20
	//17 19
	//30 28

	for (int i = 0; i < 40; i++) {
		for (int j = 0; j < 80; j++) {
			if (i == 17) {
				cout << "#                             게임이 종료되었습니다.                           #";
				break;
			}
			else if (i == 19) {
				cout << "#                         다시 한 번 하시겠습니까(Y / N) ?                     #";
				break;
			}
			else {
				cout << map[i][j];
			}
		}
		cout << "\n";
	}
}

ListType* InsertSnakeHead(ListType* snake, int x, int y) {
	ListNode* newHead = new ListNode;
	newHead->data = 'H';
	newHead->x = x;
	newHead->y = y;
	newHead->link = snake->snakeHead;
	snake->snakeHead->data = 'S';
	snake->snakeHead = newHead;
	snake->size += 1;
	return snake;
}

ListType* InsertSnake(ListType* snake, int x, int y) {
	ListNode* tmp = new ListNode;
	if (snake->size == 0) {
		tmp->data = 'H';
		snake->snakeHead = tmp;
		snake->snakeTail = tmp;
		snake->snakeHead->x = x; snake->snakeTail->y = y;
		snake->size++;
	}
	else {
		tmp->data = 'S';
		tmp->x = x; tmp->y = y;
		if (snake->size == 1) {
			snake->snakeTail->link = tmp;
		}
		else {
			snake->snakeTail->link->link = tmp;
			snake->snakeTail = snake->snakeTail->link;
		}
		snake->size++;
	}
	return snake;
}

ListType* RemoveSnakeTail(ListType* snake) {
	map[snake->snakeTail->link->x][snake->snakeTail->link->y] = ' ';
	snake->snakeTail->link = NULL;
	snake->size -= 1;
	snake->snakeTail = snake->snakeHead;
	for (int i = 0; i < snake->size - 2; i++)
		snake->snakeTail = snake->snakeTail->link;
	return snake;
}

ListType* MakeFirstSnake(ListType* snake) {
	int num = 9;
	for (int i = 0; i < 5; i++) {
		snake = InsertSnake(snake, 20, num);
		num--;
	}
	return snake;
}

void InputKey(ListType* snake, int* x, int* y) {
	int input = 0;

	if (_kbhit() > 0) {
		input = _getch();

		switch (input) {
		case 72:  //위쪽방향키
			if (*x == 1)
				break;
			*x = -1; *y = 0;
			break;
		case 80:  //아래쪽방향키
			if (*x == -1)
				break;
			*x = 1; *y = 0;
			break;
		case 77:  //오른쪽 방향키
			if (*y == -1)
				break;
			*x = 0; *y = 1;
			break;
		case 75:  //왼쪽방향키
			if (*y == 1)
				break;
			*x = 0; *y = -1;
			break;
		}
	}
}

int MoveSnake(ListType* snake, int x, int y, int score, bool* isAdd, int* addTailCount, int addTail, int* inApple, bool* isDie) {
	int headX = snake->snakeHead->x + x;
	int headY = snake->snakeHead->y + y;
	switch (map[headX][headY]) {
	case '@':
		score += 10;
		*isAdd = true;
		*addTailCount += addTail;
		*inApple -= 1;
		break;
	case '#': case 'S':
		GameOver();
		*isDie = true;
		break;
	default:
		snake = InsertSnakeHead(snake, headX, headY);
		snake = RemoveSnakeTail(snake);
		break;
	}
	return score;
}

void delaySnakeAdd(int* addTailCount, bool* isAdd, ListType* snake, int x, int y) {
	if (*addTailCount > 0) {
		snake = InsertSnakeHead(snake, snake->snakeHead->x + x, snake->snakeHead->y + y);
		*addTailCount -= 1;
	}
	else {
		*isAdd = false;
	}
}

void DrawSnake(ListType* snake) {
	int size = snake->size;
	ListNode* tmp = snake->snakeHead;
	for (int i = 0; i < size; i++) {
		map[tmp->x][tmp->y] = tmp->data;
		tmp = tmp->link;
	}
}

void MakeApple(int apple, int* inApple) {
	for (; *inApple < apple; *inApple += 1) {
		while (1) {
			int x = rand() % 40;
			int y = rand() % 80;
			if (map[x][y] != 'E' || map[x][y] != 'H' || map[x][y] != '@' || map[x][y] != '#') {
				map[x][y] = '@';
				break;
			}
		}
	}
}

int main() {
restart:
	//InitGame();
	ListType* snake;
	int x = 0, y = 1;
	bool isAdd = false;
	bool isDie = false;
	srand((unsigned)time(NULL));
	int addTailCount = 0;
	int score = 0;
	int inApple = 0;
	snake = new ListType;
	snake = MakeFirstSnake(snake);
	CreatMap();

	int delay;
	cout << "게임 지연 속도(ms) :";
	cin >> delay;

	int apple;
	cout << "과일의 갯수 :";
	cin >> apple;

	int addTail;
	cout << "과일을 먹을 때마다 늘어날 뱀의 길이 :";
	cin >> addTail;

	while (true) {
		MakeApple(apple, &inApple);
		InputKey(snake, &x, &y);
		score = MoveSnake(snake, x, y, score, &isAdd, &addTailCount, addTail, &inApple, &isDie);
		if (isDie) {
		error:
			char input = _getch();
			switch (input) {
			case 'y': case 'Y':
				system("cls");
				goto restart;
			case 'N': case'n':
				return 0;
				break;
			default:
				goto error;
			}
		}

		if (isAdd) {
			delaySnakeAdd(&addTailCount, &isAdd, snake, x, y);
		}
		DrawSnake(snake);
		PrintMap(score, snake->size);

		//ClearScreen();
		//BufferFlip();
		system("cls");
		Sleep(delay);
	}
	//DestroyGame();
	return 0;
}

/*
1. 게임판 : 게임판을 의미하는 테두리를 콘솔에 그리도록 합니다.
//clear

2. 연결 리스트를 이용한 뱀의 자료구조 구현 : 뱀은 마디마디를 해당 좌표를 갖는 구조체를 활용한 연결 리스트 자료 구조를 이용하여 구현합니다.
//claer

3. 뱀이 움직일 수 있도록 구현 : 뱀의 이동은 진행 방향에 대한 신규 헤드 노드의 생성과 마지막 노드의 삭제를 이용하여 구현합니다.
(어느 한쪽 방향으로라도 움직여야 합니다.)(너무 빨리 움직이지 않도록 Sleep 함수를 이용하여 시간 딜레이를 주도록 합니다.)
//clear

< 추가 구현 사항 >
4. 방향키를 이용하여 뱀의 진행 방향을 바꿀 수 있도록 합니다.
//clear

5. 과일을 게임판 내 임의 위치에 만들고 이를 뱀이 먹을 경우 길이가 일정값 만큼 늘어나도록 합니다.
뱀의 길이를 늘리는 것은 과일을 먹었을 때 헤드 노드는 생성하되 마지막 노드는 일정값 만큼 삭제하지 않는 방식으로 구현합니다.
(늘어날 수 있는 최대 길이는 미리 설정하도록 합니다.)
//claer

6. 과일을 먹고나면 새로운 과일을 다시 하나 임의 위치에 촐력하도록 합니다.

7. 뱀이 벽에 부딪히면 게임을 종료하도록 합니다.
//claer

8. 뱀의 머리가 자기 몸체에 부딪히면 게임을 종료하도록 합니다.
//clear

9. 게임 종료시 다시 수행할 수 있도록 선택 사항을 줍니다.

10. 게임을 계속 반복할 경우 하이스코어(최고점수)를 관리하여, 게임을 완전히 종료하는 마지막에 보여 줄 수 있도록 합니다.

11. 기타 독자적인 개선 사항을 추가로 구현할 경우 추가 점수에 반영합니다.(예, 장애물 설치, 스테이지별로 다른 게임판을 제작하여 한 스테이지를 클리어 하면 다음 스테이지로 넘어가게 하는 등등)
*/
