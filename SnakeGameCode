#include <iostream>
#include <string>
#include <malloc.h>
#include <conio.h>
#include <windows.h>
#include <time.h>
using namespace std;

auto lastInputKey = VK_RIGHT;

//키보드 커서 삭제
void CursorView()
{
	CONSOLE_CURSOR_INFO cursorInfo = { 0, };
	cursorInfo.dwSize = 1; //커서 굵기 (1 ~ 100)
	cursorInfo.bVisible = FALSE; //커서 Visible TRUE(보임) FALSE(숨김)
	SetConsoleCursorInfo(GetStdHandle(STD_OUTPUT_HANDLE), &cursorInfo);
}

char map[40][80];

void CreatMap(int level) {
	for (int i = 0; i < 40; i++) {
		for (int j = 0; j < 80; j++) {
			if (i == 0 || i == 39) {
				map[i][j] = '#';
			}
			else {
				if (j == 0 || j == 79)
					map[i][j] = '#';
				else
					map[i][j] = ' ';
			}
		}
	}

	if (level >= 2) {
		for (int i = 5; i < 35; i++)
			map[i][38] = '#';
	}
	if (level >= 3) {
		for (int i = 10; i < 80; i += 5) {
			map[5][i] = '#';
			map[35][i] = '#';
		}
	}
}

typedef struct ListNode {
	int x;
	int y;
	ListNode* llink;
	ListNode* rlink;
}ListNode;

typedef struct ListType {
	int size = 0;
	ListNode* snakeHead = NULL;
	ListNode* snakeTail = NULL;
}ListType;

void gotoxy(int x, int y) {
	HANDLE consoleHandle = GetStdHandle(STD_OUTPUT_HANDLE);
	COORD pos;
	pos.X = x;
	pos.Y = y;
	SetConsoleCursorPosition(consoleHandle, pos);
}

//string을 유니코드로 변형
wstring s2ws(const std::string& s)
{
	int len;
	int slength = (int)s.length() + 1;
	len = MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, 0, 0);
	wchar_t* buf = new wchar_t[len];
	MultiByteToWideChar(CP_ACP, 0, s.c_str(), slength, buf, len);
	wstring r(buf);
	delete[] buf;
	return r;
}

void PrintMap(int clearScore) {
	gotoxy(0, 0);
	printf("Snake Game by MinHyeong Yu                         Score : 0/%d,   Length: \n", clearScore);
	for (short i = 0; i < 40; i++) {
		for (short j = 0; j < 80; j++) {
			gotoxy(j, i + 1);
			printf("%c", map[i][j]);
		}
	}
}

int GameOver(int level) {
	string a = "게임이 종료되었습니다.\n최종 단계 : " + to_string(level) + " \n다시 한 번 하시겠습니까?";
	wstring b = s2ws(a);
	LPCWSTR str = b.c_str();
		
	int result = MessageBox(nullptr, str, TEXT("DEATH"), MB_YESNO);
	return result;
}

ListType* InsertSnakeHead(ListType* snake, int x, int y) {
	ListNode* tmp = new ListNode;

	tmp->x = x;
	tmp->y = y;
	map[x][y] = '1';
	gotoxy(y, x + 1);
	printf("H");
	gotoxy(snake->snakeHead->y, snake->snakeHead->x + 1);
	printf("S");
	snake->snakeHead->llink = tmp;
	tmp->rlink = snake->snakeHead;
	snake->snakeHead = tmp;
	snake->size += 1;

	return snake;
}

ListType* InsertSnake(ListType* snake, int x, int y) {
	ListNode* tmp = new ListNode;
	if (snake->size == 0) {
		snake->snakeHead = tmp;
		snake->snakeTail = tmp;
		snake->snakeHead->x = x; snake->snakeTail->y = y;
		map[x][y] = '1';
		gotoxy(y, x + 1);
		printf("H");
		snake->size++;
	}
	else {
		tmp->x = x; tmp->y = y;
		map[x][y] = '1';
		gotoxy(y, x + 1);
		printf("S");
		snake->snakeTail->rlink = tmp;
		tmp->llink = snake->snakeTail;
		snake->snakeTail = tmp;
		snake->size++;
	}
	return snake;
}

ListType* RemoveSnakeTail(ListType* snake) {
	ListNode* removeList = snake->snakeTail;
	map[snake->snakeTail->x][snake->snakeTail->y] = ' ';
	gotoxy(snake->snakeTail->y, snake->snakeTail->x + 1);
	printf(" ");
	snake->size -= 1;
	snake->snakeTail = snake->snakeTail->llink;
	free(removeList);
	return snake;
}

ListType* MakeFirstSnake(ListType* snake) {
	int num = 9;
	for (int i = 0; i < 5; i++) {
		snake = InsertSnake(snake, 20, num - i);
	}
	gotoxy(77, 0);
	printf("%d ", snake->size);
	return snake;
}

int MoveSnake(ListType* snake, int x, int y, int score, int clearScore, bool* isAdd, int* addTailCount, int addTail, int* inApple, bool* isDie) {
	int headX = snake->snakeHead->x + x;
	int headY = snake->snakeHead->y + y;
	switch (map[headX][headY]) {
	case '@':
		score += 10;
		gotoxy(59, 0);
		printf("%d/%d", score, clearScore);
		gotoxy(76, 0);
		printf("%d ", snake->size + addTail);
		*isAdd = true;
		*addTailCount += addTail;
		*inApple -= 1;
		break;
	case '#': case '1':
		*isDie = true;
		break;
	}

	snake = InsertSnakeHead(snake, headX, headY);
	if (!*isAdd) {
		snake = RemoveSnakeTail(snake);
	}
	else {
		*addTailCount -= 1;
		if (*addTailCount <= 0)
			*isAdd = false;
	}
	return score;
}

void InputKey(ListType* snake, int* x, int* y) {
	if (GetAsyncKeyState(VK_UP) & 0x80000) {
		if (*x != 1 && *y != 0){
			*x = -1; *y = 0;
			lastInputKey = VK_UP;
		}
	}
	if (GetAsyncKeyState(VK_DOWN) & 0x80000) {
		if (*x != -1 && *y != 0) {
			*x = 1; *y = 0;
			lastInputKey = VK_DOWN;
		}
	}
	if (GetAsyncKeyState(VK_LEFT) & 0x80000) {
		if (*y != 1 && *x != 0) {
			*x = 0; *y = -1;
			lastInputKey = VK_LEFT;
		}
	}
	if (GetAsyncKeyState(VK_RIGHT) & 0x80000) {
		if (*y != -1 && *x != 0) {
			*x = 0; *y = 1;
			lastInputKey = VK_RIGHT;
		}
	}
}

void MakeApple(int apple, int* inApple) {
	for (; *inApple < apple; *inApple += 1) {
		while (1) {
			int x = rand() % 40;
			int y = rand() % 80;
			if (map[x][y] != 'E' && map[x][y] != 'H' && map[x][y] != '@' && map[x][y] != '#') {
				map[x][y] = '@';
				gotoxy(y, x + 1);
				printf("@");
				break;
			}
		}
	}
}

void GameClear() {
	MessageBox(nullptr, TEXT("축하드립니다."), TEXT("CLEAR"), MB_OK);
}

int main() {
restart:
	CursorView(); //커서 삭제
	system("cls"); // 화면 클리어

	//필수 변수
	ListType* snake;
	int level = 1;
	int x = 0, y = 1;
	bool isAdd = false;
	bool isDie = false;
	srand((unsigned)time(NULL));
	int addTailCount = 0;
	int score = 0;
	int inApple = 0;

	//조건 기입
	int delay = 0;
	cout << "게임 지연 속도(ms) : ";
	scanf_s("%d", &delay);

	int apple = 0;
	cout << "과일의 갯수 : ";
	scanf_s("%d", &apple);

	int addTail = 0;
	cout << "과일을 먹을 때마다 늘어날 뱀의 길이 : ";
	scanf_s("%d", &addTail);

nextLevel:
	//레벨에 따라 다른 값 입력
	int clearScore = 0;
	addTailCount = 0;
	inApple = 0;
	score = 0;
	x = 0; y = 1;
	switch (level) {
	case 1:
		clearScore = 200;
		break;
	case 2:
		clearScore = 300;
		break;
	case 3:
		clearScore = 500;
		break;
	}

	//게임 플레이에 필요한 요소 빌드
	system("cls");
	CreatMap(level);
	PrintMap(clearScore);
	snake = new ListType;
	snake = MakeFirstSnake(snake);

	while (1) {
		MakeApple(apple, &inApple);
		InputKey(snake, &x, &y);
		score = MoveSnake(snake, x, y, score, clearScore, &isAdd, &addTailCount, addTail, &inApple, &isDie);
		
		//레벨 깼을 떄
		if (score >= clearScore) {
			if (level == 3) {
				GameClear();
				return 0;
			}
			string a = to_string(level) + "단계 clear";
			wstring b = s2ws(a);
			LPCWSTR str = b.c_str();
			MessageBox(nullptr, str, TEXT("CLEAR"), MB_OK);
			level++;

			a = to_string(level) + "단계로 가시겠습니까?";
			b = s2ws(a);
			str = b.c_str();
			int yesOrNo =MessageBox(nullptr, str, TEXT("CLEAR"), MB_YESNO);
			if (yesOrNo == IDYES)
				goto nextLevel;
			else if (yesOrNo == IDNO) {
				goto error;
			}
		}

		//죽었을 때
		if (isDie) {
		error:
			int yesOrNo = GameOver(level);
			if (yesOrNo == IDYES) {
				goto restart;
			}
			else {
				return 0;
			}
		}
		Sleep(delay);
	}
}
